{"ast":null,"code":"// Mock API service for frontend-only application\n// This replaces the backend API calls with simulated responses\n// Phishing keywords and patterns for detection\nconst phishingKeywords=['urgent','verify','suspend','click here','act now','limited time','verify account','update payment','confirm identity','security alert','login required','account locked','unusual activity','verify now','immediate action','expire','unauthorized access','security breach'];const phishingDomains=['bit.ly','tinyurl.com','goo.gl','t.co','ow.ly','is.gd','suspicious-link.com','fake-bank.net','phishing-site.org'];const suspiciousPatterns=[/\\b[A-Z]{2,}\\s+[A-Z]{2,}/g,// Multiple uppercase words\n/\\$\\d+/g,// Money amounts\n/click\\s+here/gi,/verify\\s+now/gi,/urgent/gi,/act\\s+now/gi,/limited\\s+time/gi];// URL regex pattern\nconst urlPattern=/(https?:\\/\\/[^\\s]+)/gi;// Simulate AI analysis delay\nconst simulateDelay=function(){let ms=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1500;return new Promise(resolve=>setTimeout(resolve,ms));};// Extract URLs from text\nconst extractUrls=text=>{const urls=text.match(urlPattern)||[];return urls;};// Analyze email content for phishing indicators\nconst analyzeEmailContent=(subject,body)=>{const fullText=`${subject} ${body}`.toLowerCase();let phishingScore=0;let suspiciousElements=[];// Check for phishing keywords\nphishingKeywords.forEach(keyword=>{if(fullText.includes(keyword.toLowerCase())){phishingScore+=15;suspiciousElements.push(keyword);}});// Check for suspicious patterns\nsuspiciousPatterns.forEach(pattern=>{const matches=fullText.match(pattern);if(matches){phishingScore+=matches.length*10;suspiciousElements.push(...matches);}});// Check URLs\nconst urls=extractUrls(body);const maliciousUrls=[];urls.forEach(url=>{phishingDomains.forEach(domain=>{if(url.includes(domain)){phishingScore+=25;maliciousUrls.push(url);}});// Check for suspicious URL characteristics\nif(url.length>50)phishingScore+=5;if(url.includes('bit.ly')||url.includes('tinyurl'))phishingScore+=10;if((url.match(/\\./g)||[]).length>3)phishingScore+=5;});// Additional heuristics\nif(subject.includes('!'))phishingScore+=5;if(fullText.includes('congratulations'))phishingScore+=10;if(fullText.includes('winner')||fullText.includes('won'))phishingScore+=15;// Cap the score at 100\nphishingScore=Math.min(phishingScore,100);return{score:phishingScore,suspiciousElements,urls,maliciousUrls};};// Mock email API\nexport const emailAPI={predictPhishing:async emailData=>{await simulateDelay();const{subject,body}=emailData;const analysis=analyzeEmailContent(subject,body);const isPhishing=analysis.score>50;const confidence=Math.min(95,Math.max(60,analysis.score+Math.random()*20));// Generate URL predictions\nconst urlPredictions=analysis.urls.map(url=>{const isUrlPhishing=analysis.maliciousUrls.includes(url)||Math.random()>0.7;return{url,prediction:isUrlPhishing?'Phishing':'Safe',confidence:isUrlPhishing?Math.random()*30+70:Math.random()*30+50};});return{prediction:isPhishing?'Phishing Email':'Safe Email',confidence:Math.round(confidence),reason:isPhishing?'Multiple phishing indicators detected':'No significant phishing patterns found',analysis_type:'Frontend Heuristic Analysis',total_links:analysis.urls.length,malicious_links:analysis.maliciousUrls,suspicious_patterns:[...new Set(analysis.suspiciousElements)],url_predictions:urlPredictions};},batchPredict:async emailsData=>{await simulateDelay(2000);const results=[];for(const email of emailsData.emails){const result=await emailAPI.predictPhishing(email);results.push(result);}return{results};},healthCheck:async()=>{await simulateDelay(500);return{status:'healthy',models_loaded:true,message:'Frontend-only mode - using heuristic analysis',version:'2.0.0-frontend'};}};// Mock URL analysis\nexport const urlAPI={predictURL:async urlData=>{var _url$split$;await simulateDelay(1200);const{url}=urlData;let phishingScore=0;const features={};// Basic URL analysis\nfeatures.url_length=url.length;features.domain_length=((_url$split$=url.split('/')[2])===null||_url$split$===void 0?void 0:_url$split$.length)||0;features.path_length=url.split('/').slice(3).join('/').length;features.dots_count=(url.match(/\\./g)||[]).length;features.hyphens_count=(url.match(/-/g)||[]).length;features.underscores_count=(url.match(/_/g)||[]).length;features.slashes_count=(url.match(/\\//g)||[]).length;features.question_marks_count=(url.match(/\\?/g)||[]).length;features.equals_count=(url.match(/=/g)||[]).length;features.at_count=(url.match(/@/g)||[]).length;// Scoring logic\nif(features.url_length>75)phishingScore+=20;if(features.dots_count>3)phishingScore+=15;if(features.hyphens_count>2)phishingScore+=10;if(url.includes('bit.ly')||url.includes('tinyurl'))phishingScore+=30;if(phishingDomains.some(domain=>url.includes(domain)))phishingScore+=40;// Add some randomness for demo purposes\nphishingScore+=Math.random()*20;phishingScore=Math.min(100,phishingScore);const isPhishing=phishingScore>60;const confidence=Math.min(95,Math.max(65,phishingScore+Math.random()*15));return{prediction:isPhishing?'Phishing':'Safe',confidence:Math.round(confidence),features,analysis_method:'Heuristic URL Analysis',risk_factors:isPhishing?['Suspicious domain','Unusual URL structure','High character count']:[]};},trainEnhancedModel:async()=>{await simulateDelay(3000);return{status:'success',message:'Model training simulation completed',accuracy:0.92+Math.random()*0.05,training_time:'45 seconds'};}};export default{emailAPI,urlAPI};","map":{"version":3,"names":["phishingKeywords","phishingDomains","suspiciousPatterns","urlPattern","simulateDelay","ms","arguments","length","undefined","Promise","resolve","setTimeout","extractUrls","text","urls","match","analyzeEmailContent","subject","body","fullText","toLowerCase","phishingScore","suspiciousElements","forEach","keyword","includes","push","pattern","matches","maliciousUrls","url","domain","Math","min","score","emailAPI","predictPhishing","emailData","analysis","isPhishing","confidence","max","random","urlPredictions","map","isUrlPhishing","prediction","round","reason","analysis_type","total_links","malicious_links","suspicious_patterns","Set","url_predictions","batchPredict","emailsData","results","email","emails","result","healthCheck","status","models_loaded","message","version","urlAPI","predictURL","urlData","_url$split$","features","url_length","domain_length","split","path_length","slice","join","dots_count","hyphens_count","underscores_count","slashes_count","question_marks_count","equals_count","at_count","some","analysis_method","risk_factors","trainEnhancedModel","accuracy","training_time"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/phishing-emails - Copy/ai-phishing-detector/frontend/src/mockAPI.js"],"sourcesContent":["// Mock API service for frontend-only application\r\n// This replaces the backend API calls with simulated responses\r\n\r\n// Phishing keywords and patterns for detection\r\nconst phishingKeywords = [\r\n    'urgent', 'verify', 'suspend', 'click here', 'act now', 'limited time',\r\n    'verify account', 'update payment', 'confirm identity', 'security alert',\r\n    'login required', 'account locked', 'unusual activity', 'verify now',\r\n    'immediate action', 'expire', 'unauthorized access', 'security breach'\r\n];\r\n\r\nconst phishingDomains = [\r\n    'bit.ly', 'tinyurl.com', 'goo.gl', 't.co', 'ow.ly', 'is.gd',\r\n    'suspicious-link.com', 'fake-bank.net', 'phishing-site.org'\r\n];\r\n\r\nconst suspiciousPatterns = [\r\n    /\\b[A-Z]{2,}\\s+[A-Z]{2,}/g, // Multiple uppercase words\r\n    /\\$\\d+/g, // Money amounts\r\n    /click\\s+here/gi,\r\n    /verify\\s+now/gi,\r\n    /urgent/gi,\r\n    /act\\s+now/gi,\r\n    /limited\\s+time/gi\r\n];\r\n\r\n// URL regex pattern\r\nconst urlPattern = /(https?:\\/\\/[^\\s]+)/gi;\r\n\r\n// Simulate AI analysis delay\r\nconst simulateDelay = (ms = 1500) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Extract URLs from text\r\nconst extractUrls = (text) => {\r\n    const urls = text.match(urlPattern) || [];\r\n    return urls;\r\n};\r\n\r\n// Analyze email content for phishing indicators\r\nconst analyzeEmailContent = (subject, body) => {\r\n    const fullText = `${subject} ${body}`.toLowerCase();\r\n    let phishingScore = 0;\r\n    let suspiciousElements = [];\r\n    \r\n    // Check for phishing keywords\r\n    phishingKeywords.forEach(keyword => {\r\n        if (fullText.includes(keyword.toLowerCase())) {\r\n            phishingScore += 15;\r\n            suspiciousElements.push(keyword);\r\n        }\r\n    });\r\n    \r\n    // Check for suspicious patterns\r\n    suspiciousPatterns.forEach(pattern => {\r\n        const matches = fullText.match(pattern);\r\n        if (matches) {\r\n            phishingScore += matches.length * 10;\r\n            suspiciousElements.push(...matches);\r\n        }\r\n    });\r\n    \r\n    // Check URLs\r\n    const urls = extractUrls(body);\r\n    const maliciousUrls = [];\r\n    \r\n    urls.forEach(url => {\r\n        phishingDomains.forEach(domain => {\r\n            if (url.includes(domain)) {\r\n                phishingScore += 25;\r\n                maliciousUrls.push(url);\r\n            }\r\n        });\r\n        \r\n        // Check for suspicious URL characteristics\r\n        if (url.length > 50) phishingScore += 5;\r\n        if (url.includes('bit.ly') || url.includes('tinyurl')) phishingScore += 10;\r\n        if ((url.match(/\\./g) || []).length > 3) phishingScore += 5;\r\n    });\r\n    \r\n    // Additional heuristics\r\n    if (subject.includes('!')) phishingScore += 5;\r\n    if (fullText.includes('congratulations')) phishingScore += 10;\r\n    if (fullText.includes('winner') || fullText.includes('won')) phishingScore += 15;\r\n    \r\n    // Cap the score at 100\r\n    phishingScore = Math.min(phishingScore, 100);\r\n    \r\n    return {\r\n        score: phishingScore,\r\n        suspiciousElements,\r\n        urls,\r\n        maliciousUrls\r\n    };\r\n};\r\n\r\n// Mock email API\r\nexport const emailAPI = {\r\n    predictPhishing: async (emailData) => {\r\n        await simulateDelay();\r\n        \r\n        const { subject, body } = emailData;\r\n        const analysis = analyzeEmailContent(subject, body);\r\n        \r\n        const isPhishing = analysis.score > 50;\r\n        const confidence = Math.min(95, Math.max(60, analysis.score + Math.random() * 20));\r\n        \r\n        // Generate URL predictions\r\n        const urlPredictions = analysis.urls.map(url => {\r\n            const isUrlPhishing = analysis.maliciousUrls.includes(url) || Math.random() > 0.7;\r\n            return {\r\n                url,\r\n                prediction: isUrlPhishing ? 'Phishing' : 'Safe',\r\n                confidence: isUrlPhishing ? \r\n                    Math.random() * 30 + 70 : \r\n                    Math.random() * 30 + 50\r\n            };\r\n        });\r\n        \r\n        return {\r\n            prediction: isPhishing ? 'Phishing Email' : 'Safe Email',\r\n            confidence: Math.round(confidence),\r\n            reason: isPhishing ? \r\n                'Multiple phishing indicators detected' : \r\n                'No significant phishing patterns found',\r\n            analysis_type: 'Frontend Heuristic Analysis',\r\n            total_links: analysis.urls.length,\r\n            malicious_links: analysis.maliciousUrls,\r\n            suspicious_patterns: [...new Set(analysis.suspiciousElements)],\r\n            url_predictions: urlPredictions\r\n        };\r\n    },\r\n\r\n    batchPredict: async (emailsData) => {\r\n        await simulateDelay(2000);\r\n        \r\n        const results = [];\r\n        for (const email of emailsData.emails) {\r\n            const result = await emailAPI.predictPhishing(email);\r\n            results.push(result);\r\n        }\r\n        \r\n        return { results };\r\n    },\r\n\r\n    healthCheck: async () => {\r\n        await simulateDelay(500);\r\n        \r\n        return {\r\n            status: 'healthy',\r\n            models_loaded: true,\r\n            message: 'Frontend-only mode - using heuristic analysis',\r\n            version: '2.0.0-frontend'\r\n        };\r\n    }\r\n};\r\n\r\n// Mock URL analysis\r\nexport const urlAPI = {\r\n    predictURL: async (urlData) => {\r\n        await simulateDelay(1200);\r\n        \r\n        const { url } = urlData;\r\n        let phishingScore = 0;\r\n        const features = {};\r\n        \r\n        // Basic URL analysis\r\n        features.url_length = url.length;\r\n        features.domain_length = url.split('/')[2]?.length || 0;\r\n        features.path_length = url.split('/').slice(3).join('/').length;\r\n        features.dots_count = (url.match(/\\./g) || []).length;\r\n        features.hyphens_count = (url.match(/-/g) || []).length;\r\n        features.underscores_count = (url.match(/_/g) || []).length;\r\n        features.slashes_count = (url.match(/\\//g) || []).length;\r\n        features.question_marks_count = (url.match(/\\?/g) || []).length;\r\n        features.equals_count = (url.match(/=/g) || []).length;\r\n        features.at_count = (url.match(/@/g) || []).length;\r\n        \r\n        // Scoring logic\r\n        if (features.url_length > 75) phishingScore += 20;\r\n        if (features.dots_count > 3) phishingScore += 15;\r\n        if (features.hyphens_count > 2) phishingScore += 10;\r\n        if (url.includes('bit.ly') || url.includes('tinyurl')) phishingScore += 30;\r\n        if (phishingDomains.some(domain => url.includes(domain))) phishingScore += 40;\r\n        \r\n        // Add some randomness for demo purposes\r\n        phishingScore += Math.random() * 20;\r\n        phishingScore = Math.min(100, phishingScore);\r\n        \r\n        const isPhishing = phishingScore > 60;\r\n        const confidence = Math.min(95, Math.max(65, phishingScore + Math.random() * 15));\r\n        \r\n        return {\r\n            prediction: isPhishing ? 'Phishing' : 'Safe',\r\n            confidence: Math.round(confidence),\r\n            features,\r\n            analysis_method: 'Heuristic URL Analysis',\r\n            risk_factors: isPhishing ? [\r\n                'Suspicious domain',\r\n                'Unusual URL structure',\r\n                'High character count'\r\n            ] : []\r\n        };\r\n    },\r\n\r\n    trainEnhancedModel: async () => {\r\n        await simulateDelay(3000);\r\n        \r\n        return {\r\n            status: 'success',\r\n            message: 'Model training simulation completed',\r\n            accuracy: 0.92 + Math.random() * 0.05,\r\n            training_time: '45 seconds'\r\n        };\r\n    }\r\n};\r\n\r\nexport default { emailAPI, urlAPI };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}