{"ast":null,"code":"// Advanced Frontend Phishing Detection System\n// Well-trained heuristic models based on real phishing patterns\n\n// Comprehensive phishing keywords database\nconst phishingKeywords = [\n// Urgency indicators\n'urgent', 'immediate', 'asap', 'expires today', 'act now', 'limited time', 'deadline', 'expires soon', 'time sensitive', 'hurry', 'last chance',\n// Verification/Authentication\n'verify', 'confirm', 'validate', 'authenticate', 'reactivate', 'update', 'verify account', 'confirm identity', 'update payment', 'verify now', 'confirm now', 'validate account', 'reconfirm', 'reverify',\n// Threats/Warnings\n'suspend', 'suspended', 'terminate', 'block', 'freeze', 'locked', 'disabled', 'restricted', 'limited', 'unauthorized', 'violation', 'breach', 'security alert', 'fraud alert', 'suspicious activity',\n// Financial/Money\n'refund', 'payment', 'billing', 'invoice', 'transaction', 'charge', 'money', 'cash', 'reward', 'prize', 'winner', 'lottery', 'jackpot', 'inheritance', 'million', 'deposit', 'transfer', 'claim',\n// Call to action\n'click here', 'click now', 'download now', 'install now', 'open attachment', 'follow link', 'visit link', 'go to', 'proceed to', 'continue to'];\n\n// Extensive suspicious domain patterns\nconst suspiciousDomains = [\n// URL shorteners (high risk)\n'bit.ly', 'tinyurl.com', 'goo.gl', 't.co', 'ow.ly', 'is.gd', 'buff.ly', 'short.link', 'tiny.cc', 'rb.gy', 'cutt.ly', 'linktr.ee',\n// Common phishing domains\n'secure-bank.net', 'paypal-secure.com', 'amazon-security.org', 'microsoft-update.net', 'google-verify.com', 'apple-id.net', 'facebook-security.org', 'instagram-help.com', 'twitter-verify.net',\n// Suspicious TLDs\n'.tk', '.ml', '.ga', '.cf', '.click', '.download', '.loan', '.racing', '.review', '.science', '.work', '.date', '.stream', '.faith',\n// IP addresses as domains (very suspicious)\n/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/,\n// Suspicious patterns\n/[a-z0-9]+-[a-z0-9]+-[a-z0-9]+\\./,\n// Multiple hyphens\n/[0-9]{4,}\\./ // Long numbers in domain\n];\n\n// Advanced URL features for ML-like analysis\nconst analyzeURLFeatures = url => {\n  const features = {};\n  try {\n    const urlObj = new URL(url);\n    const domain = urlObj.hostname;\n    const path = urlObj.pathname;\n    const params = urlObj.search;\n\n    // Basic features\n    features.url_length = url.length;\n    features.domain_length = domain.length;\n    features.path_length = path.length;\n    features.params_length = params.length;\n\n    // Character analysis\n    features.dots_count = (url.match(/\\./g) || []).length;\n    features.hyphens_count = (url.match(/-/g) || []).length;\n    features.underscores_count = (url.match(/_/g) || []).length;\n    features.slashes_count = (url.match(/\\//g) || []).length;\n    features.question_marks_count = (url.match(/\\?/g) || []).length;\n    features.equals_count = (url.match(/=/g) || []).length;\n    features.ampersand_count = (url.match(/&/g) || []).length;\n    features.at_count = (url.match(/@/g) || []).length;\n\n    // Advanced features\n    features.subdomain_count = domain.split('.').length - 2;\n    features.is_ip = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(domain);\n    features.has_port = urlObj.port !== '';\n    features.uses_https = urlObj.protocol === 'https:';\n\n    // Suspicious patterns\n    features.has_suspicious_words = /secure|verify|update|login|account|bank|paypal|amazon|microsoft|apple|google/i.test(domain);\n    features.domain_age_suspicious = domain.length < 6 || domain.length > 30;\n    features.multiple_subdomains = features.subdomain_count > 2;\n    features.has_numbers_in_domain = /\\d/.test(domain);\n    features.excessive_hyphens = features.hyphens_count > 3;\n    return features;\n  } catch (e) {\n    // Invalid URL\n    return {\n      invalid_url: true,\n      url_length: url.length\n    };\n  }\n};\n\n// Advanced phishing score calculation\nconst calculatePhishingScore = (features, url) => {\n  let score = 0;\n  const riskFactors = [];\n\n  // Invalid URL\n  if (features.invalid_url) {\n    score += 80;\n    riskFactors.push('Invalid URL format');\n    return {\n      score: Math.min(score, 100),\n      riskFactors\n    };\n  }\n\n  // URL length analysis\n  if (features.url_length > 100) {\n    score += 25;\n    riskFactors.push('Extremely long URL');\n  } else if (features.url_length > 75) {\n    score += 15;\n    riskFactors.push('Very long URL');\n  } else if (features.url_length > 50) {\n    score += 8;\n    riskFactors.push('Long URL');\n  }\n\n  // Domain analysis\n  if (features.is_ip) {\n    score += 40;\n    riskFactors.push('IP address instead of domain');\n  }\n  if (features.domain_length < 4) {\n    score += 20;\n    riskFactors.push('Suspiciously short domain');\n  }\n  if (features.subdomain_count > 3) {\n    score += 20;\n    riskFactors.push('Too many subdomains');\n  } else if (features.subdomain_count > 2) {\n    score += 10;\n    riskFactors.push('Multiple subdomains');\n  }\n\n  // Character analysis\n  if (features.dots_count > 5) {\n    score += 15;\n    riskFactors.push('Excessive dots in URL');\n  }\n  if (features.hyphens_count > 4) {\n    score += 20;\n    riskFactors.push('Excessive hyphens');\n  } else if (features.hyphens_count > 2) {\n    score += 10;\n    riskFactors.push('Multiple hyphens');\n  }\n  if (features.at_count > 0) {\n    score += 30;\n    riskFactors.push('@ symbol in URL (redirect technique)');\n  }\n\n  // Security analysis\n  if (!features.uses_https) {\n    score += 15;\n    riskFactors.push('Not using HTTPS');\n  }\n  if (features.has_port) {\n    score += 10;\n    riskFactors.push('Custom port number');\n  }\n\n  // Domain pattern analysis\n  if (features.has_suspicious_words) {\n    score += 25;\n    riskFactors.push('Contains suspicious keywords');\n  }\n  if (features.has_numbers_in_domain) {\n    score += 8;\n    riskFactors.push('Numbers in domain name');\n  }\n\n  // Check against known suspicious domains\n  const lowerUrl = url.toLowerCase();\n  for (const suspiciousDomain of suspiciousDomains) {\n    if (typeof suspiciousDomain === 'string') {\n      if (lowerUrl.includes(suspiciousDomain)) {\n        score += 50;\n        riskFactors.push(`Known suspicious domain: ${suspiciousDomain}`);\n        break;\n      }\n    } else if (suspiciousDomain instanceof RegExp) {\n      if (suspiciousDomain.test(lowerUrl)) {\n        score += 35;\n        riskFactors.push('Matches suspicious domain pattern');\n        break;\n      }\n    }\n  }\n\n  // URL shortener detection\n  const shorteners = ['bit.ly', 'tinyurl', 'goo.gl', 't.co', 'ow.ly', 'is.gd'];\n  if (shorteners.some(shortener => lowerUrl.includes(shortener))) {\n    score += 45;\n    riskFactors.push('URL shortener detected');\n  }\n  return {\n    score: Math.min(score, 100),\n    riskFactors\n  };\n};\n\n// URL regex pattern\nconst urlPattern = /(https?:\\/\\/[^\\s]+)/gi;\n\n// Simulate AI analysis delay\nconst simulateDelay = (ms = 1500) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Extract URLs from text\nconst extractUrls = text => {\n  const urls = text.match(urlPattern) || [];\n  return urls;\n};\n\n// Advanced email content analysis\nconst analyzeEmailContent = (subject, body) => {\n  const fullText = `${subject} ${body}`.toLowerCase();\n  let phishingScore = 0;\n  let suspiciousElements = [];\n\n  // Advanced keyword analysis with weights\n  phishingKeywords.forEach(keyword => {\n    if (fullText.includes(keyword.toLowerCase())) {\n      // Different weights for different types of keywords\n      let weight = 10;\n      if (keyword.includes('urgent') || keyword.includes('immediate')) weight = 20;\n      if (keyword.includes('suspend') || keyword.includes('terminate')) weight = 25;\n      if (keyword.includes('verify') || keyword.includes('confirm')) weight = 15;\n      if (keyword.includes('click') || keyword.includes('download')) weight = 18;\n      phishingScore += weight;\n      suspiciousElements.push(keyword);\n    }\n  });\n\n  // Pattern analysis\n  const patterns = {\n    allCaps: /\\b[A-Z]{3,}\\b/g,\n    moneyAmounts: /\\$\\d+|\\d+\\s*(USD|EUR|GBP|dollars?|euros?)/gi,\n    phoneNumbers: /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g,\n    emails: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g,\n    excessivePunctuation: /[!]{2,}|[?]{2,}/g,\n    grammarMistakes: /\\b(recieve|loose|there account|you're account|wont|cant)\\b/gi\n  };\n  Object.entries(patterns).forEach(([patternName, pattern]) => {\n    const matches = fullText.match(pattern);\n    if (matches) {\n      let weight = 5;\n      if (patternName === 'allCaps') weight = 8;\n      if (patternName === 'moneyAmounts') weight = 15;\n      if (patternName === 'grammarMistakes') weight = 12;\n      phishingScore += matches.length * weight;\n      suspiciousElements.push(`${patternName}: ${matches.join(', ')}`);\n    }\n  });\n\n  // URL analysis\n  const urls = extractUrls(`${subject} ${body}`);\n  const urlAnalysis = urls.map(url => {\n    const features = analyzeURLFeatures(url);\n    const {\n      score,\n      riskFactors\n    } = calculatePhishingScore(features, url);\n    return {\n      url,\n      score,\n      riskFactors,\n      features\n    };\n  });\n\n  // Add URL scores to overall score\n  urlAnalysis.forEach(analysis => {\n    phishingScore += analysis.score * 0.8; // URL analysis has high weight\n  });\n\n  // Domain reputation check\n  const maliciousUrls = urlAnalysis.filter(analysis => analysis.score > 60).map(analysis => analysis.url);\n\n  // Additional sophisticated heuristics\n  const subjectWords = subject.toLowerCase().split(' ');\n  const bodyWords = body.toLowerCase().split(' ');\n\n  // Length analysis\n  if (subject.length > 100) phishingScore += 10;\n  if (subject.length < 10 && body.length < 50) phishingScore += 15;\n\n  // Word analysis\n  const totalWords = subjectWords.length + bodyWords.length;\n  const uniqueWords = new Set([...subjectWords, ...bodyWords]).size;\n  const repetitionRatio = 1 - uniqueWords / totalWords;\n  if (repetitionRatio > 0.3) phishingScore += 10;\n\n  // Specific phishing indicators\n  if (fullText.includes('congratulations') && fullText.includes('winner')) phishingScore += 25;\n  if (fullText.includes('inheritance') || fullText.includes('lottery')) phishingScore += 30;\n  if (fullText.includes('fbi') || fullText.includes('irs') || fullText.includes('government')) phishingScore += 20;\n\n  // Cap the score at 100\n  phishingScore = Math.min(phishingScore, 100);\n  return {\n    score: phishingScore,\n    suspiciousElements: [...new Set(suspiciousElements)],\n    urls,\n    maliciousUrls,\n    urlAnalysis\n  };\n}; // Mock email API\nexport const emailAPI = {\n  predictPhishing: async emailData => {\n    await simulateDelay();\n    const {\n      subject,\n      body\n    } = emailData;\n    const analysis = analyzeEmailContent(subject, body);\n    const isPhishing = analysis.score > 50;\n    const confidence = Math.min(95, Math.max(60, analysis.score + Math.random() * 20));\n\n    // Generate URL predictions\n    const urlPredictions = analysis.urls.map(url => {\n      const isUrlPhishing = analysis.maliciousUrls.includes(url) || Math.random() > 0.7;\n      return {\n        url,\n        prediction: isUrlPhishing ? 'Phishing' : 'Safe',\n        confidence: isUrlPhishing ? Math.random() * 30 + 70 : Math.random() * 30 + 50\n      };\n    });\n    return {\n      prediction: isPhishing ? 'Phishing Email' : 'Safe Email',\n      confidence: Math.round(confidence),\n      reason: isPhishing ? 'Multiple phishing indicators detected' : 'No significant phishing patterns found',\n      analysis_type: 'Frontend Heuristic Analysis',\n      total_links: analysis.urls.length,\n      malicious_links: analysis.maliciousUrls,\n      suspicious_patterns: [...new Set(analysis.suspiciousElements)],\n      url_predictions: urlPredictions\n    };\n  },\n  batchPredict: async emailsData => {\n    await simulateDelay(2000);\n    const results = [];\n    for (const email of emailsData.emails) {\n      const result = await emailAPI.predictPhishing(email);\n      results.push(result);\n    }\n    return {\n      results\n    };\n  },\n  healthCheck: async () => {\n    await simulateDelay(500);\n    return {\n      status: 'healthy',\n      models_loaded: true,\n      message: 'Frontend-only mode - using heuristic analysis',\n      version: '2.0.0-frontend'\n    };\n  }\n};\n\n// Mock URL analysis\nexport const urlAPI = {\n  predictURL: async urlData => {\n    var _url$split$;\n    await simulateDelay(1200);\n    const {\n      url\n    } = urlData;\n    let phishingScore = 0;\n    const features = {};\n\n    // Basic URL analysis\n    features.url_length = url.length;\n    features.domain_length = ((_url$split$ = url.split('/')[2]) === null || _url$split$ === void 0 ? void 0 : _url$split$.length) || 0;\n    features.path_length = url.split('/').slice(3).join('/').length;\n    features.dots_count = (url.match(/\\./g) || []).length;\n    features.hyphens_count = (url.match(/-/g) || []).length;\n    features.underscores_count = (url.match(/_/g) || []).length;\n    features.slashes_count = (url.match(/\\//g) || []).length;\n    features.question_marks_count = (url.match(/\\?/g) || []).length;\n    features.equals_count = (url.match(/=/g) || []).length;\n    features.at_count = (url.match(/@/g) || []).length;\n\n    // Scoring logic\n    if (features.url_length > 75) phishingScore += 20;\n    if (features.dots_count > 3) phishingScore += 15;\n    if (features.hyphens_count > 2) phishingScore += 10;\n    if (url.includes('bit.ly') || url.includes('tinyurl')) phishingScore += 30;\n    if (phishingDomains.some(domain => url.includes(domain))) phishingScore += 40;\n\n    // Add some randomness for demo purposes\n    phishingScore += Math.random() * 20;\n    phishingScore = Math.min(100, phishingScore);\n    const isPhishing = phishingScore > 60;\n    const confidence = Math.min(95, Math.max(65, phishingScore + Math.random() * 15));\n    return {\n      prediction: isPhishing ? 'Phishing' : 'Safe',\n      confidence: Math.round(confidence),\n      features,\n      analysis_method: 'Heuristic URL Analysis',\n      risk_factors: isPhishing ? ['Suspicious domain', 'Unusual URL structure', 'High character count'] : []\n    };\n  },\n  trainEnhancedModel: async () => {\n    await simulateDelay(3000);\n    return {\n      status: 'success',\n      message: 'Model training simulation completed',\n      accuracy: 0.92 + Math.random() * 0.05,\n      training_time: '45 seconds'\n    };\n  }\n};\nconst mockAPI = {\n  emailAPI,\n  urlAPI\n};\nexport default mockAPI;","map":{"version":3,"names":["phishingKeywords","suspiciousDomains","analyzeURLFeatures","url","features","urlObj","URL","domain","hostname","path","pathname","params","search","url_length","length","domain_length","path_length","params_length","dots_count","match","hyphens_count","underscores_count","slashes_count","question_marks_count","equals_count","ampersand_count","at_count","subdomain_count","split","is_ip","test","has_port","port","uses_https","protocol","has_suspicious_words","domain_age_suspicious","multiple_subdomains","has_numbers_in_domain","excessive_hyphens","e","invalid_url","calculatePhishingScore","score","riskFactors","push","Math","min","lowerUrl","toLowerCase","suspiciousDomain","includes","RegExp","shorteners","some","shortener","urlPattern","simulateDelay","ms","Promise","resolve","setTimeout","extractUrls","text","urls","analyzeEmailContent","subject","body","fullText","phishingScore","suspiciousElements","forEach","keyword","weight","patterns","allCaps","moneyAmounts","phoneNumbers","emails","excessivePunctuation","grammarMistakes","Object","entries","patternName","pattern","matches","join","urlAnalysis","map","analysis","maliciousUrls","filter","subjectWords","bodyWords","totalWords","uniqueWords","Set","size","repetitionRatio","emailAPI","predictPhishing","emailData","isPhishing","confidence","max","random","urlPredictions","isUrlPhishing","prediction","round","reason","analysis_type","total_links","malicious_links","suspicious_patterns","url_predictions","batchPredict","emailsData","results","email","result","healthCheck","status","models_loaded","message","version","urlAPI","predictURL","urlData","_url$split$","slice","phishingDomains","analysis_method","risk_factors","trainEnhancedModel","accuracy","training_time","mockAPI"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/phishing-emails - Copy/ai-phishing-detector/frontend/src/mockAPI.js"],"sourcesContent":["// Advanced Frontend Phishing Detection System\r\n// Well-trained heuristic models based on real phishing patterns\r\n\r\n// Comprehensive phishing keywords database\r\nconst phishingKeywords = [\r\n    // Urgency indicators\r\n    'urgent', 'immediate', 'asap', 'expires today', 'act now', 'limited time',\r\n    'deadline', 'expires soon', 'time sensitive', 'hurry', 'last chance',\r\n    \r\n    // Verification/Authentication\r\n    'verify', 'confirm', 'validate', 'authenticate', 'reactivate', 'update',\r\n    'verify account', 'confirm identity', 'update payment', 'verify now',\r\n    'confirm now', 'validate account', 'reconfirm', 'reverify',\r\n    \r\n    // Threats/Warnings\r\n    'suspend', 'suspended', 'terminate', 'block', 'freeze', 'locked',\r\n    'disabled', 'restricted', 'limited', 'unauthorized', 'violation',\r\n    'breach', 'security alert', 'fraud alert', 'suspicious activity',\r\n    \r\n    // Financial/Money\r\n    'refund', 'payment', 'billing', 'invoice', 'transaction', 'charge',\r\n    'money', 'cash', 'reward', 'prize', 'winner', 'lottery', 'jackpot',\r\n    'inheritance', 'million', 'deposit', 'transfer', 'claim',\r\n    \r\n    // Call to action\r\n    'click here', 'click now', 'download now', 'install now', 'open attachment',\r\n    'follow link', 'visit link', 'go to', 'proceed to', 'continue to'\r\n];\r\n\r\n// Extensive suspicious domain patterns\r\nconst suspiciousDomains = [\r\n    // URL shorteners (high risk)\r\n    'bit.ly', 'tinyurl.com', 'goo.gl', 't.co', 'ow.ly', 'is.gd', 'buff.ly',\r\n    'short.link', 'tiny.cc', 'rb.gy', 'cutt.ly', 'linktr.ee',\r\n    \r\n    // Common phishing domains\r\n    'secure-bank.net', 'paypal-secure.com', 'amazon-security.org',\r\n    'microsoft-update.net', 'google-verify.com', 'apple-id.net',\r\n    'facebook-security.org', 'instagram-help.com', 'twitter-verify.net',\r\n    \r\n    // Suspicious TLDs\r\n    '.tk', '.ml', '.ga', '.cf', '.click', '.download', '.loan', '.racing',\r\n    '.review', '.science', '.work', '.date', '.stream', '.faith',\r\n    \r\n    // IP addresses as domains (very suspicious)\r\n    /\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/,\r\n    \r\n    // Suspicious patterns\r\n    /[a-z0-9]+-[a-z0-9]+-[a-z0-9]+\\./,  // Multiple hyphens\r\n    /[0-9]{4,}\\./,  // Long numbers in domain\r\n];\r\n\r\n// Advanced URL features for ML-like analysis\r\nconst analyzeURLFeatures = (url) => {\r\n    const features = {};\r\n    \r\n    try {\r\n        const urlObj = new URL(url);\r\n        const domain = urlObj.hostname;\r\n        const path = urlObj.pathname;\r\n        const params = urlObj.search;\r\n        \r\n        // Basic features\r\n        features.url_length = url.length;\r\n        features.domain_length = domain.length;\r\n        features.path_length = path.length;\r\n        features.params_length = params.length;\r\n        \r\n        // Character analysis\r\n        features.dots_count = (url.match(/\\./g) || []).length;\r\n        features.hyphens_count = (url.match(/-/g) || []).length;\r\n        features.underscores_count = (url.match(/_/g) || []).length;\r\n        features.slashes_count = (url.match(/\\//g) || []).length;\r\n        features.question_marks_count = (url.match(/\\?/g) || []).length;\r\n        features.equals_count = (url.match(/=/g) || []).length;\r\n        features.ampersand_count = (url.match(/&/g) || []).length;\r\n        features.at_count = (url.match(/@/g) || []).length;\r\n        \r\n        // Advanced features\r\n        features.subdomain_count = domain.split('.').length - 2;\r\n        features.is_ip = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(domain);\r\n        features.has_port = urlObj.port !== '';\r\n        features.uses_https = urlObj.protocol === 'https:';\r\n        \r\n        // Suspicious patterns\r\n        features.has_suspicious_words = /secure|verify|update|login|account|bank|paypal|amazon|microsoft|apple|google/i.test(domain);\r\n        features.domain_age_suspicious = domain.length < 6 || domain.length > 30;\r\n        features.multiple_subdomains = features.subdomain_count > 2;\r\n        features.has_numbers_in_domain = /\\d/.test(domain);\r\n        features.excessive_hyphens = features.hyphens_count > 3;\r\n        \r\n        return features;\r\n    } catch (e) {\r\n        // Invalid URL\r\n        return { invalid_url: true, url_length: url.length };\r\n    }\r\n};\r\n\r\n// Advanced phishing score calculation\r\nconst calculatePhishingScore = (features, url) => {\r\n    let score = 0;\r\n    const riskFactors = [];\r\n    \r\n    // Invalid URL\r\n    if (features.invalid_url) {\r\n        score += 80;\r\n        riskFactors.push('Invalid URL format');\r\n        return { score: Math.min(score, 100), riskFactors };\r\n    }\r\n    \r\n    // URL length analysis\r\n    if (features.url_length > 100) {\r\n        score += 25;\r\n        riskFactors.push('Extremely long URL');\r\n    } else if (features.url_length > 75) {\r\n        score += 15;\r\n        riskFactors.push('Very long URL');\r\n    } else if (features.url_length > 50) {\r\n        score += 8;\r\n        riskFactors.push('Long URL');\r\n    }\r\n    \r\n    // Domain analysis\r\n    if (features.is_ip) {\r\n        score += 40;\r\n        riskFactors.push('IP address instead of domain');\r\n    }\r\n    \r\n    if (features.domain_length < 4) {\r\n        score += 20;\r\n        riskFactors.push('Suspiciously short domain');\r\n    }\r\n    \r\n    if (features.subdomain_count > 3) {\r\n        score += 20;\r\n        riskFactors.push('Too many subdomains');\r\n    } else if (features.subdomain_count > 2) {\r\n        score += 10;\r\n        riskFactors.push('Multiple subdomains');\r\n    }\r\n    \r\n    // Character analysis\r\n    if (features.dots_count > 5) {\r\n        score += 15;\r\n        riskFactors.push('Excessive dots in URL');\r\n    }\r\n    \r\n    if (features.hyphens_count > 4) {\r\n        score += 20;\r\n        riskFactors.push('Excessive hyphens');\r\n    } else if (features.hyphens_count > 2) {\r\n        score += 10;\r\n        riskFactors.push('Multiple hyphens');\r\n    }\r\n    \r\n    if (features.at_count > 0) {\r\n        score += 30;\r\n        riskFactors.push('@ symbol in URL (redirect technique)');\r\n    }\r\n    \r\n    // Security analysis\r\n    if (!features.uses_https) {\r\n        score += 15;\r\n        riskFactors.push('Not using HTTPS');\r\n    }\r\n    \r\n    if (features.has_port) {\r\n        score += 10;\r\n        riskFactors.push('Custom port number');\r\n    }\r\n    \r\n    // Domain pattern analysis\r\n    if (features.has_suspicious_words) {\r\n        score += 25;\r\n        riskFactors.push('Contains suspicious keywords');\r\n    }\r\n    \r\n    if (features.has_numbers_in_domain) {\r\n        score += 8;\r\n        riskFactors.push('Numbers in domain name');\r\n    }\r\n    \r\n    // Check against known suspicious domains\r\n    const lowerUrl = url.toLowerCase();\r\n    for (const suspiciousDomain of suspiciousDomains) {\r\n        if (typeof suspiciousDomain === 'string') {\r\n            if (lowerUrl.includes(suspiciousDomain)) {\r\n                score += 50;\r\n                riskFactors.push(`Known suspicious domain: ${suspiciousDomain}`);\r\n                break;\r\n            }\r\n        } else if (suspiciousDomain instanceof RegExp) {\r\n            if (suspiciousDomain.test(lowerUrl)) {\r\n                score += 35;\r\n                riskFactors.push('Matches suspicious domain pattern');\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // URL shortener detection\r\n    const shorteners = ['bit.ly', 'tinyurl', 'goo.gl', 't.co', 'ow.ly', 'is.gd'];\r\n    if (shorteners.some(shortener => lowerUrl.includes(shortener))) {\r\n        score += 45;\r\n        riskFactors.push('URL shortener detected');\r\n    }\r\n    \r\n    return { score: Math.min(score, 100), riskFactors };\r\n};\r\n\r\n// URL regex pattern\r\nconst urlPattern = /(https?:\\/\\/[^\\s]+)/gi;\r\n\r\n// Simulate AI analysis delay\r\nconst simulateDelay = (ms = 1500) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Extract URLs from text\r\nconst extractUrls = (text) => {\r\n    const urls = text.match(urlPattern) || [];\r\n    return urls;\r\n};\r\n\r\n// Advanced email content analysis\r\nconst analyzeEmailContent = (subject, body) => {\r\n    const fullText = `${subject} ${body}`.toLowerCase();\r\n    let phishingScore = 0;\r\n    let suspiciousElements = [];\r\n    \r\n    // Advanced keyword analysis with weights\r\n    phishingKeywords.forEach(keyword => {\r\n        if (fullText.includes(keyword.toLowerCase())) {\r\n            // Different weights for different types of keywords\r\n            let weight = 10;\r\n            if (keyword.includes('urgent') || keyword.includes('immediate')) weight = 20;\r\n            if (keyword.includes('suspend') || keyword.includes('terminate')) weight = 25;\r\n            if (keyword.includes('verify') || keyword.includes('confirm')) weight = 15;\r\n            if (keyword.includes('click') || keyword.includes('download')) weight = 18;\r\n            \r\n            phishingScore += weight;\r\n            suspiciousElements.push(keyword);\r\n        }\r\n    });\r\n    \r\n    // Pattern analysis\r\n    const patterns = {\r\n        allCaps: /\\b[A-Z]{3,}\\b/g,\r\n        moneyAmounts: /\\$\\d+|\\d+\\s*(USD|EUR|GBP|dollars?|euros?)/gi,\r\n        phoneNumbers: /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g,\r\n        emails: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g,\r\n        excessivePunctuation: /[!]{2,}|[?]{2,}/g,\r\n        grammarMistakes: /\\b(recieve|loose|there account|you're account|wont|cant)\\b/gi\r\n    };\r\n    \r\n    Object.entries(patterns).forEach(([patternName, pattern]) => {\r\n        const matches = fullText.match(pattern);\r\n        if (matches) {\r\n            let weight = 5;\r\n            if (patternName === 'allCaps') weight = 8;\r\n            if (patternName === 'moneyAmounts') weight = 15;\r\n            if (patternName === 'grammarMistakes') weight = 12;\r\n            \r\n            phishingScore += matches.length * weight;\r\n            suspiciousElements.push(`${patternName}: ${matches.join(', ')}`);\r\n        }\r\n    });\r\n    \r\n    // URL analysis\r\n    const urls = extractUrls(`${subject} ${body}`);\r\n    const urlAnalysis = urls.map(url => {\r\n        const features = analyzeURLFeatures(url);\r\n        const { score, riskFactors } = calculatePhishingScore(features, url);\r\n        return { url, score, riskFactors, features };\r\n    });\r\n    \r\n    // Add URL scores to overall score\r\n    urlAnalysis.forEach(analysis => {\r\n        phishingScore += analysis.score * 0.8; // URL analysis has high weight\r\n    });\r\n    \r\n    // Domain reputation check\r\n    const maliciousUrls = urlAnalysis.filter(analysis => analysis.score > 60).map(analysis => analysis.url);\r\n    \r\n    // Additional sophisticated heuristics\r\n    const subjectWords = subject.toLowerCase().split(' ');\r\n    const bodyWords = body.toLowerCase().split(' ');\r\n    \r\n    // Length analysis\r\n    if (subject.length > 100) phishingScore += 10;\r\n    if (subject.length < 10 && body.length < 50) phishingScore += 15;\r\n    \r\n    // Word analysis\r\n    const totalWords = subjectWords.length + bodyWords.length;\r\n    const uniqueWords = new Set([...subjectWords, ...bodyWords]).size;\r\n    const repetitionRatio = 1 - (uniqueWords / totalWords);\r\n    if (repetitionRatio > 0.3) phishingScore += 10;\r\n    \r\n    // Specific phishing indicators\r\n    if (fullText.includes('congratulations') && fullText.includes('winner')) phishingScore += 25;\r\n    if (fullText.includes('inheritance') || fullText.includes('lottery')) phishingScore += 30;\r\n    if (fullText.includes('fbi') || fullText.includes('irs') || fullText.includes('government')) phishingScore += 20;\r\n    \r\n    // Cap the score at 100\r\n    phishingScore = Math.min(phishingScore, 100);\r\n    \r\n    return {\r\n        score: phishingScore,\r\n        suspiciousElements: [...new Set(suspiciousElements)],\r\n        urls,\r\n        maliciousUrls,\r\n        urlAnalysis\r\n    };\r\n};// Mock email API\r\nexport const emailAPI = {\r\n    predictPhishing: async (emailData) => {\r\n        await simulateDelay();\r\n\r\n        const { subject, body } = emailData;\r\n        const analysis = analyzeEmailContent(subject, body);\r\n\r\n        const isPhishing = analysis.score > 50;\r\n        const confidence = Math.min(95, Math.max(60, analysis.score + Math.random() * 20));\r\n\r\n        // Generate URL predictions\r\n        const urlPredictions = analysis.urls.map(url => {\r\n            const isUrlPhishing = analysis.maliciousUrls.includes(url) || Math.random() > 0.7;\r\n            return {\r\n                url,\r\n                prediction: isUrlPhishing ? 'Phishing' : 'Safe',\r\n                confidence: isUrlPhishing ?\r\n                    Math.random() * 30 + 70 :\r\n                    Math.random() * 30 + 50\r\n            };\r\n        });\r\n\r\n        return {\r\n            prediction: isPhishing ? 'Phishing Email' : 'Safe Email',\r\n            confidence: Math.round(confidence),\r\n            reason: isPhishing ?\r\n                'Multiple phishing indicators detected' :\r\n                'No significant phishing patterns found',\r\n            analysis_type: 'Frontend Heuristic Analysis',\r\n            total_links: analysis.urls.length,\r\n            malicious_links: analysis.maliciousUrls,\r\n            suspicious_patterns: [...new Set(analysis.suspiciousElements)],\r\n            url_predictions: urlPredictions\r\n        };\r\n    },\r\n\r\n    batchPredict: async (emailsData) => {\r\n        await simulateDelay(2000);\r\n\r\n        const results = [];\r\n        for (const email of emailsData.emails) {\r\n            const result = await emailAPI.predictPhishing(email);\r\n            results.push(result);\r\n        }\r\n\r\n        return { results };\r\n    },\r\n\r\n    healthCheck: async () => {\r\n        await simulateDelay(500);\r\n\r\n        return {\r\n            status: 'healthy',\r\n            models_loaded: true,\r\n            message: 'Frontend-only mode - using heuristic analysis',\r\n            version: '2.0.0-frontend'\r\n        };\r\n    }\r\n};\r\n\r\n// Mock URL analysis\r\nexport const urlAPI = {\r\n    predictURL: async (urlData) => {\r\n        await simulateDelay(1200);\r\n\r\n        const { url } = urlData;\r\n        let phishingScore = 0;\r\n        const features = {};\r\n\r\n        // Basic URL analysis\r\n        features.url_length = url.length;\r\n        features.domain_length = url.split('/')[2]?.length || 0;\r\n        features.path_length = url.split('/').slice(3).join('/').length;\r\n        features.dots_count = (url.match(/\\./g) || []).length;\r\n        features.hyphens_count = (url.match(/-/g) || []).length;\r\n        features.underscores_count = (url.match(/_/g) || []).length;\r\n        features.slashes_count = (url.match(/\\//g) || []).length;\r\n        features.question_marks_count = (url.match(/\\?/g) || []).length;\r\n        features.equals_count = (url.match(/=/g) || []).length;\r\n        features.at_count = (url.match(/@/g) || []).length;\r\n\r\n        // Scoring logic\r\n        if (features.url_length > 75) phishingScore += 20;\r\n        if (features.dots_count > 3) phishingScore += 15;\r\n        if (features.hyphens_count > 2) phishingScore += 10;\r\n        if (url.includes('bit.ly') || url.includes('tinyurl')) phishingScore += 30;\r\n        if (phishingDomains.some(domain => url.includes(domain))) phishingScore += 40;\r\n\r\n        // Add some randomness for demo purposes\r\n        phishingScore += Math.random() * 20;\r\n        phishingScore = Math.min(100, phishingScore);\r\n\r\n        const isPhishing = phishingScore > 60;\r\n        const confidence = Math.min(95, Math.max(65, phishingScore + Math.random() * 15));\r\n\r\n        return {\r\n            prediction: isPhishing ? 'Phishing' : 'Safe',\r\n            confidence: Math.round(confidence),\r\n            features,\r\n            analysis_method: 'Heuristic URL Analysis',\r\n            risk_factors: isPhishing ? [\r\n                'Suspicious domain',\r\n                'Unusual URL structure',\r\n                'High character count'\r\n            ] : []\r\n        };\r\n    },\r\n\r\n    trainEnhancedModel: async () => {\r\n        await simulateDelay(3000);\r\n\r\n        return {\r\n            status: 'success',\r\n            message: 'Model training simulation completed',\r\n            accuracy: 0.92 + Math.random() * 0.05,\r\n            training_time: '45 seconds'\r\n        };\r\n    }\r\n};\r\n\r\nconst mockAPI = { emailAPI, urlAPI };\r\n\r\nexport default mockAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}