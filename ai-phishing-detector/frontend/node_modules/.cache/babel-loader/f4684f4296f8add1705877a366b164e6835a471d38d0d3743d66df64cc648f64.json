{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log('Making API request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  console.log('API response received:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('Response error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\nexport const emailAPI = {\n  predictPhishing: async emailData => {\n    try {\n      const response = await apiClient.post('/predict', emailData);\n      return response.data;\n    } catch (error) {\n      console.error('Error predicting phishing:', error);\n      throw error;\n    }\n  },\n  batchPredict: async emailsData => {\n    try {\n      const response = await apiClient.post('/batch-predict', emailsData);\n      return response.data;\n    } catch (error) {\n      console.error('Error batch predicting:', error);\n      throw error;\n    }\n  },\n  healthCheck: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking health:', error);\n      throw error;\n    }\n  }\n};\nexport const urlAPI = {\n  predictURL: async urlData => {\n    try {\n      const response = await apiClient.post('/predict-url', urlData);\n      return response.data;\n    } catch (error) {\n      console.error('Error predicting URL:', error);\n      throw error;\n    }\n  },\n  trainEnhancedModel: async () => {\n    try {\n      const response = await apiClient.post('/train-enhanced');\n      return response.data;\n    } catch (error) {\n      console.error('Error training enhanced model:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","emailAPI","predictPhishing","emailData","post","batchPredict","emailsData","healthCheck","get","urlAPI","predictURL","urlData","trainEnhancedModel"],"sources":["d:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/phishing-emails/ai-phishing-detector/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Request interceptor\r\napiClient.interceptors.request.use(\r\n    (config) => {\r\n        console.log('Making API request:', config.method?.toUpperCase(), config.url);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor\r\napiClient.interceptors.response.use(\r\n    (response) => {\r\n        console.log('API response received:', response.status, response.config.url);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('Response error:', error.response?.status, error.response?.data);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport const emailAPI = {\r\n    predictPhishing: async (emailData) => {\r\n        try {\r\n            const response = await apiClient.post('/predict', emailData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error predicting phishing:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    batchPredict: async (emailsData) => {\r\n        try {\r\n            const response = await apiClient.post('/batch-predict', emailsData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error batch predicting:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    healthCheck: async () => {\r\n        try {\r\n            const response = await apiClient.get('/health');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error checking health:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const urlAPI = {\r\n    predictURL: async (urlData) => {\r\n        try {\r\n            const response = await apiClient.post('/predict-url', urlData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error predicting URL:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    trainEnhancedModel: async () => {\r\n        try {\r\n            const response = await apiClient.post('/train-enhanced');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error training enhanced model:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}