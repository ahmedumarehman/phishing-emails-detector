{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'/api';const apiClient=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor\napiClient.interceptors.request.use(config=>{var _config$method;console.log('Making API request:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor\napiClient.interceptors.response.use(response=>{console.log('API response received:',response.status,response.config.url);return response;},error=>{var _error$response,_error$response2;console.error('Response error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);return Promise.reject(error);});export const emailAPI={predictPhishing:async emailData=>{try{const response=await apiClient.post('/predict',emailData);return response.data;}catch(error){console.error('Error predicting phishing:',error);throw error;}},batchPredict:async emailsData=>{try{const response=await apiClient.post('/batch-predict',emailsData);return response.data;}catch(error){console.error('Error batch predicting:',error);throw error;}},healthCheck:async()=>{try{const response=await apiClient.get('/health');return response.data;}catch(error){console.error('Error checking health:',error);throw error;}}};export const urlAPI={predictURL:async urlData=>{try{const response=await apiClient.post('/predict-url',urlData);return response.data;}catch(error){console.error('Error predicting URL:',error);throw error;}},trainEnhancedModel:async()=>{try{const response=await apiClient.post('/train-enhanced');return response.data;}catch(error){console.error('Error training enhanced model:',error);throw error;}}};export default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","emailAPI","predictPhishing","emailData","post","batchPredict","emailsData","healthCheck","get","urlAPI","predictURL","urlData","trainEnhancedModel"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/phishing-emails/ai-phishing-detector/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Request interceptor\r\napiClient.interceptors.request.use(\r\n    (config) => {\r\n        console.log('Making API request:', config.method?.toUpperCase(), config.url);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor\r\napiClient.interceptors.response.use(\r\n    (response) => {\r\n        console.log('API response received:', response.status, response.config.url);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('Response error:', error.response?.status, error.response?.data);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport const emailAPI = {\r\n    predictPhishing: async (emailData) => {\r\n        try {\r\n            const response = await apiClient.post('/predict', emailData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error predicting phishing:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    batchPredict: async (emailsData) => {\r\n        try {\r\n            const response = await apiClient.post('/batch-predict', emailsData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error batch predicting:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    healthCheck: async () => {\r\n        try {\r\n            const response = await apiClient.get('/health');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error checking health:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const urlAPI = {\r\n    predictURL: async (urlData) => {\r\n        try {\r\n            const response = await apiClient.post('/predict-url', urlData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error predicting URL:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    trainEnhancedModel: async () => {\r\n        try {\r\n            const response = await apiClient.post('/train-enhanced');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error training enhanced model:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}